package components

templ FileUpload() {
	<div id="file-upload" class="mt-4">
		<label class="block pl-4 text-sm font-bold leading-6 text-gray-900 mb-2">Upload Audio File</label>
		<div class="mt-2">
			<div id="drop-zone" class="relative flex justify-center rounded-lg border border-dashed border-gray-300 px-6 py-10 hover:border-indigo-400 transition-colors duration-200">
				<div class="text-center">
					<svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
						<path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
					</svg>
					<div class="mt-4 flex text-sm leading-6 text-gray-600">
						<label for="file-upload-input" class="relative cursor-pointer rounded-md bg-white font-semibold text-indigo-600 focus-within:outline-none focus-within:ring-2 focus-within:ring-indigo-600 focus-within:ring-offset-2 hover:text-indigo-500">
							<span>Upload a file</span>
							<input 
								id="file-upload-input" 
								name="audio-file" 
								type="file" 
								class="sr-only" 
								accept="audio/*,.mp3,.wav,.m4a,.ogg,.flac"
								onchange="handleFileSelect(this)"
							/>
						</label>
						<p class="pl-1">or drag and drop</p>
					</div>
					<p class="text-xs leading-5 text-gray-600">MP3, WAV, M4A, OGG, FLAC up to 50MB</p>
				</div>
			</div>
		</div>

		<!-- File Preview Area -->
		<div id="file-preview" class="hidden mt-4 p-4 bg-gray-50 border border-gray-200 rounded-lg">
			<div class="flex items-center justify-between">
				<div class="flex items-center space-x-3">
					<div class="flex-shrink-0">
						<svg class="h-8 w-8 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3"/>
						</svg>
					</div>
					<div class="min-w-0 flex-1">
						<p class="text-sm font-medium text-gray-900" id="file-name">File name</p>
						<p class="text-sm text-gray-500" id="file-size">Size</p>
					</div>
					<div class="flex-shrink-0">
						<button type="button" onclick="removeFile()" class="rounded-md bg-white text-sm font-medium text-gray-700 hover:text-gray-900 focus:outline-none focus:ring-2 focus:ring-indigo-500">
							<svg class="h-5 w-5 text-gray-400 hover:text-gray-500" fill="currentColor" viewBox="0 0 20 20">
								<path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
							</svg>
						</button>
					</div>
				</div>
			</div>
			
			<!-- Audio Player Preview -->
			<div class="mt-3">
				<audio id="audio-preview" controls class="w-full h-8">
					<source id="audio-source" src="" type="">
					Your browser does not support the audio element.
				</audio>
			</div>
		</div>

		<!-- Upload Progress -->
		<div id="upload-progress" class="hidden mt-4">
			<div class="flex items-center justify-between text-sm text-gray-600 mb-1">
				<span>Uploading...</span>
				<span id="progress-percent">0%</span>
			</div>
			<div class="w-full bg-gray-200 rounded-full h-2">
				<div id="progress-bar" class="bg-indigo-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
			</div>
		</div>

		<!-- Error Message -->
		<div id="file-error" class="hidden mt-4 p-3 bg-red-50 border border-red-200 rounded-md">
			<div class="flex items-center">
				<svg class="w-5 h-5 text-red-400 mr-2" fill="currentColor" viewBox="0 0 20 20">
					<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
				</svg>
				<span class="text-red-800 text-sm font-medium" id="error-message">Error message</span>
			</div>
		</div>
	</div>

	<script>
		let selectedFile = null;

		function handleFileSelect(input) {
			const file = input.files[0];
			if (!file) return;

			// Validate file
			if (!validateFile(file)) return;

			selectedFile = file;
			showFilePreview(file);
			hideError();
			notifyValidationSystem();
		}

		function validateFile(file) {
			// Check file size (50MB max)
			const maxSize = 50 * 1024 * 1024; // 50MB
			if (file.size > maxSize) {
				showError('File size must be less than 50MB');
				return false;
			}

			// Check file type
			const allowedTypes = ['audio/mpeg', 'audio/wav', 'audio/mp4', 'audio/ogg', 'audio/flac', 'audio/x-m4a'];
			const allowedExtensions = ['.mp3', '.wav', '.m4a', '.ogg', '.flac'];
			
			const isValidType = allowedTypes.includes(file.type);
			const hasValidExtension = allowedExtensions.some(ext => file.name.toLowerCase().endsWith(ext));

			if (!isValidType && !hasValidExtension) {
				showError('Please select a valid audio file (MP3, WAV, M4A, OGG, or FLAC)');
				return false;
			}

			return true;
		}

		function showFilePreview(file) {
			const preview = document.getElementById('file-preview');
			const fileName = document.getElementById('file-name');
			const fileSize = document.getElementById('file-size');
			const audioPreview = document.getElementById('audio-preview');
			const audioSource = document.getElementById('audio-source');

			fileName.textContent = file.name;
			fileSize.textContent = formatFileSize(file.size);
			
			// Create object URL for audio preview
			const url = URL.createObjectURL(file);
			audioSource.src = url;
			audioSource.type = file.type;
			audioPreview.load();

			preview.classList.remove('hidden');
		}

		function removeFile() {
			selectedFile = null;
			document.getElementById('file-upload-input').value = '';
			document.getElementById('file-preview').classList.add('hidden');
			
			// Revoke object URL to free memory
			const audioSource = document.getElementById('audio-source');
			if (audioSource.src) {
				URL.revokeObjectURL(audioSource.src);
				audioSource.src = '';
			}
			notifyValidationSystem();
		}

		function formatFileSize(bytes) {
			if (bytes === 0) return '0 Bytes';
			const k = 1024;
			const sizes = ['Bytes', 'KB', 'MB', 'GB'];
			const i = Math.floor(Math.log(bytes) / Math.log(k));
			return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
		}

		function showError(message) {
			const errorDiv = document.getElementById('file-error');
			const errorMessage = document.getElementById('error-message');
			errorMessage.textContent = message;
			errorDiv.classList.remove('hidden');
		}

		function hideError() {
			document.getElementById('file-error').classList.add('hidden');
		}

		// Drag and drop functionality
		const dropZone = document.getElementById('drop-zone');

		dropZone.addEventListener('dragover', function(e) {
			e.preventDefault();
			this.classList.add('border-indigo-400', 'bg-indigo-50');
		});

		dropZone.addEventListener('dragleave', function(e) {
			e.preventDefault();
			this.classList.remove('border-indigo-400', 'bg-indigo-50');
		});

		dropZone.addEventListener('drop', function(e) {
			e.preventDefault();
			this.classList.remove('border-indigo-400', 'bg-indigo-50');
			
			const files = e.dataTransfer.files;
			if (files.length > 0) {
				const file = files[0];
				if (validateFile(file)) {
					selectedFile = file;
					showFilePreview(file);
					hideError();
					notifyValidationSystem();
					// Also update the input
					const input = document.getElementById('file-upload-input');
					// Note: We can't directly set input.files, but we store the file in selectedFile
				}
			}
		});

		// Expose selectedFile for form submission
		window.getSelectedAudioFile = function() {
			return selectedFile;
		};

		// Notify validation system when file state changes
		function notifyValidationSystem() {
			// Check if we have a valid file
			const isValid = selectedFile !== null;
			
			console.log('File validation:', isValid, selectedFile);
			
			// Update Alpine.js store validation state
			if (typeof Alpine !== 'undefined' && Alpine.store('voiceClone')) {
				Alpine.store('voiceClone').validateAudioInput(isValid);
				console.log('Alpine store updated - audioInputValid:', Alpine.store('voiceClone').audioInputValid);
			} else {
				console.log('Alpine not available');
			}
		}
	</script>
}