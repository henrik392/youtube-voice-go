// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.924
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func MicrophoneRecorder() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div id=\"microphone-recorder\" class=\"mt-4\"><label class=\"block pl-4 text-sm font-bold leading-6 text-gray-900 mb-2\">Record Audio</label><!-- Recording Interface --><div class=\"mt-2 p-6 bg-gradient-to-br from-gray-50 to-gray-100 rounded-lg border border-gray-200\"><div class=\"text-center\"><!-- Recording Status --><div id=\"recording-status\" class=\"mb-4\"><div id=\"status-idle\" class=\"recording-state\"><div class=\"mx-auto w-20 h-20 bg-gradient-to-br from-green-400 to-green-600 rounded-full flex items-center justify-center shadow-lg cursor-pointer hover:shadow-xl transition-all duration-200 hover:scale-105\" onclick=\"startRecording()\"><svg class=\"w-8 h-8 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z\"></path></svg></div><p class=\"mt-3 text-sm font-medium text-gray-700\">Click to start recording</p><p class=\"text-xs text-gray-500\">Make sure to allow microphone access</p></div><div id=\"status-recording\" class=\"recording-state hidden\"><div class=\"mx-auto w-20 h-20 bg-gradient-to-br from-red-400 to-red-600 rounded-full flex items-center justify-center shadow-lg animate-pulse\"><svg class=\"w-8 h-8 text-white\" fill=\"currentColor\" viewBox=\"0 0 24 24\"><rect x=\"6\" y=\"6\" width=\"12\" height=\"12\" rx=\"2\"></rect></svg></div><p class=\"mt-3 text-sm font-medium text-red-700\">Recording...</p><div class=\"flex items-center justify-center space-x-2 mt-2\"><span id=\"recording-timer\" class=\"text-lg font-mono text-red-600\">00:00</span></div><button type=\"button\" onclick=\"stopRecording()\" class=\"mt-3 px-4 py-2 text-sm font-medium text-red-700 bg-red-100 border border-red-300 rounded-md hover:bg-red-200 transition-colors duration-200\">Stop Recording</button></div><div id=\"status-processing\" class=\"recording-state hidden\"><div class=\"mx-auto w-20 h-20 bg-gradient-to-br from-blue-400 to-blue-600 rounded-full flex items-center justify-center shadow-lg\"><svg class=\"w-8 h-8 text-white animate-spin\" fill=\"none\" viewBox=\"0 0 24 24\"><circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle> <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path></svg></div><p class=\"mt-3 text-sm font-medium text-blue-700\">Processing audio...</p></div></div><!-- Audio Visualizer --><div id=\"audio-visualizer\" class=\"hidden mb-4\"><div class=\"flex justify-center items-end space-x-1 h-12\"><div class=\"w-1 bg-green-500 rounded-full animate-bounce\" style=\"height: 8px; animation-delay: 0ms;\"></div><div class=\"w-1 bg-green-500 rounded-full animate-bounce\" style=\"height: 16px; animation-delay: 150ms;\"></div><div class=\"w-1 bg-green-500 rounded-full animate-bounce\" style=\"height: 24px; animation-delay: 300ms;\"></div><div class=\"w-1 bg-green-500 rounded-full animate-bounce\" style=\"height: 12px; animation-delay: 450ms;\"></div><div class=\"w-1 bg-green-500 rounded-full animate-bounce\" style=\"height: 32px; animation-delay: 600ms;\"></div><div class=\"w-1 bg-green-500 rounded-full animate-bounce\" style=\"height: 20px; animation-delay: 750ms;\"></div><div class=\"w-1 bg-green-500 rounded-full animate-bounce\" style=\"height: 16px; animation-delay: 900ms;\"></div><div class=\"w-1 bg-green-500 rounded-full animate-bounce\" style=\"height: 8px; animation-delay: 1050ms;\"></div></div></div><!-- Recording Tips --><div class=\"text-xs text-gray-500 space-y-1\"><p>ðŸ’¡ <strong>Tip:</strong> Record at least 10 seconds for best results</p><p>ðŸ”‡ <strong>Quiet environment</strong> recommended</p><p>ðŸ“± <strong>Speak clearly</strong> and at normal volume</p></div></div></div><!-- Recorded Audio Preview --><div id=\"recorded-preview\" class=\"hidden mt-4 p-4 bg-gray-50 border border-gray-200 rounded-lg\"><div class=\"flex items-center justify-between mb-3\"><h4 class=\"text-sm font-medium text-gray-900\">Recorded Audio</h4><div class=\"flex space-x-2\"><button type=\"button\" onclick=\"playRecording()\" class=\"text-sm text-indigo-600 hover:text-indigo-500 font-medium\">Play</button> <button type=\"button\" onclick=\"retryRecording()\" class=\"text-sm text-gray-600 hover:text-gray-500 font-medium\">Re-record</button></div></div><div class=\"bg-white p-3 rounded border\"><audio id=\"recorded-audio\" controls class=\"w-full h-8\">Your browser does not support the audio element.</audio></div><div class=\"mt-2 text-xs text-gray-500\">Duration: <span id=\"audio-duration\">0:00</span> |  Quality: <span id=\"audio-quality\">Good</span></div></div><!-- Error Messages --><div id=\"microphone-error\" class=\"hidden mt-4 p-3 bg-red-50 border border-red-200 rounded-md\"><div class=\"flex items-center\"><svg class=\"w-5 h-5 text-red-400 mr-2\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clip-rule=\"evenodd\"></path></svg> <span class=\"text-red-800 text-sm font-medium\" id=\"mic-error-message\">Error message</span></div></div></div><script>\n\t\tlet mediaRecorder = null;\n\t\tlet recordedChunks = [];\n\t\tlet recordingTimer = null;\n\t\tlet startTime = null;\n\t\tlet recordedBlob = null;\n\n\t\tasync function startRecording() {\n\t\t\ttry {\n\t\t\t\thideError();\n\t\t\t\t\n\t\t\t\t// Request microphone access\n\t\t\t\tconst stream = await navigator.mediaDevices.getUserMedia({ \n\t\t\t\t\taudio: {\n\t\t\t\t\t\techoCancellation: true,\n\t\t\t\t\t\tnoiseSuppression: true,\n\t\t\t\t\t\tautoGainControl: true\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Check if MediaRecorder is supported\n\t\t\t\tif (!MediaRecorder.isTypeSupported('audio/webm')) {\n\t\t\t\t\tthrow new Error('Audio recording not supported in this browser');\n\t\t\t\t}\n\n\t\t\t\trecordedChunks = [];\n\t\t\t\tmediaRecorder = new MediaRecorder(stream, { \n\t\t\t\t\tmimeType: 'audio/webm'\n\t\t\t\t});\n\n\t\t\t\tmediaRecorder.addEventListener('dataavailable', event => {\n\t\t\t\t\tif (event.data.size > 0) {\n\t\t\t\t\t\trecordedChunks.push(event.data);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tmediaRecorder.addEventListener('stop', () => {\n\t\t\t\t\trecordedBlob = new Blob(recordedChunks, { type: 'audio/webm' });\n\t\t\t\t\tshowRecordedPreview();\n\t\t\t\t\tstream.getTracks().forEach(track => track.stop());\n\t\t\t\t});\n\n\t\t\t\t// Start recording\n\t\t\t\tmediaRecorder.start(1000); // Collect data every second\n\t\t\t\tstartTime = Date.now();\n\t\t\t\t\n\t\t\t\t// Update UI\n\t\t\t\tshowRecordingState();\n\t\t\t\tstartTimer();\n\t\t\t\tshowVisualizer();\n\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('Recording error:', error);\n\t\t\t\tlet errorMessage = 'Could not access microphone. ';\n\t\t\t\t\n\t\t\t\tif (error.name === 'NotAllowedError') {\n\t\t\t\t\terrorMessage += 'Please allow microphone access and try again.';\n\t\t\t\t} else if (error.name === 'NotFoundError') {\n\t\t\t\t\terrorMessage += 'No microphone found. Please connect a microphone and try again.';\n\t\t\t\t} else {\n\t\t\t\t\terrorMessage += error.message || 'Unknown error occurred.';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tshowError(errorMessage);\n\t\t\t}\n\t\t}\n\n\t\tfunction stopRecording(event) {\n\t\t\tif (event) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\tevent.stopPropagation();\n\t\t\t}\n\t\t\t\n\t\t\tif (mediaRecorder && mediaRecorder.state !== 'inactive') {\n\t\t\t\tmediaRecorder.stop();\n\t\t\t\tstopTimer();\n\t\t\t\thideVisualizer();\n\t\t\t\tshowProcessingState();\n\t\t\t}\n\t\t}\n\n\t\tfunction showRecordingState() {\n\t\t\tdocument.getElementById('status-idle').classList.add('hidden');\n\t\t\tdocument.getElementById('status-recording').classList.remove('hidden');\n\t\t\tdocument.getElementById('status-processing').classList.add('hidden');\n\t\t}\n\n\t\tfunction showProcessingState() {\n\t\t\tdocument.getElementById('status-recording').classList.add('hidden');\n\t\t\tdocument.getElementById('status-processing').classList.remove('hidden');\n\t\t}\n\n\t\tfunction showIdleState() {\n\t\t\tdocument.getElementById('status-recording').classList.add('hidden');\n\t\t\tdocument.getElementById('status-processing').classList.add('hidden');\n\t\t\tdocument.getElementById('status-idle').classList.remove('hidden');\n\t\t}\n\n\t\tfunction startTimer() {\n\t\t\tconst timerDisplay = document.getElementById('recording-timer');\n\t\t\trecordingTimer = setInterval(() => {\n\t\t\t\tconst elapsed = Math.floor((Date.now() - startTime) / 1000);\n\t\t\t\tconst minutes = Math.floor(elapsed / 60);\n\t\t\t\tconst seconds = elapsed % 60;\n\t\t\t\ttimerDisplay.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n\t\t\t}, 1000);\n\t\t}\n\n\t\tfunction stopTimer() {\n\t\t\tif (recordingTimer) {\n\t\t\t\tclearInterval(recordingTimer);\n\t\t\t\trecordingTimer = null;\n\t\t\t}\n\t\t}\n\n\t\tfunction showVisualizer() {\n\t\t\tdocument.getElementById('audio-visualizer').classList.remove('hidden');\n\t\t}\n\n\t\tfunction hideVisualizer() {\n\t\t\tdocument.getElementById('audio-visualizer').classList.add('hidden');\n\t\t}\n\n\t\tfunction showRecordedPreview() {\n\t\t\tconst preview = document.getElementById('recorded-preview');\n\t\t\tconst audio = document.getElementById('recorded-audio');\n\t\t\t\n\t\t\tconst audioUrl = URL.createObjectURL(recordedBlob);\n\t\t\taudio.src = audioUrl;\n\t\t\tnotifyValidationSystem();\n\t\t\t\n\t\t\t// Calculate duration and quality\n\t\t\taudio.addEventListener('loadedmetadata', () => {\n\t\t\t\tconst duration = isNaN(audio.duration) ? 0 : Math.floor(audio.duration);\n\t\t\t\tconst minutes = Math.floor(duration / 60);\n\t\t\t\tconst seconds = duration % 60;\n\t\t\t\t\n\t\t\t\tif (duration > 0) {\n\t\t\t\t\tdocument.getElementById('audio-duration').textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;\n\t\t\t\t\t\n\t\t\t\t\t// Simple quality assessment based on duration\n\t\t\t\t\tlet quality = 'Good';\n\t\t\t\t\tif (duration < 5) quality = 'Too short';\n\t\t\t\t\telse if (duration < 10) quality = 'Fair';\n\t\t\t\t\telse if (duration > 60) quality = 'Very long';\n\t\t\t\t\t\n\t\t\t\t\tdocument.getElementById('audio-quality').textContent = quality;\n\t\t\t\t} else {\n\t\t\t\t\t// Fallback for when duration isn't available immediately\n\t\t\t\t\tdocument.getElementById('audio-duration').textContent = 'Processing...';\n\t\t\t\t\tdocument.getElementById('audio-quality').textContent = 'Analyzing...';\n\t\t\t\t\t\n\t\t\t\t\t// Try again after a short delay\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tconst newDuration = isNaN(audio.duration) ? 0 : Math.floor(audio.duration);\n\t\t\t\t\t\tif (newDuration > 0) {\n\t\t\t\t\t\t\tconst newMinutes = Math.floor(newDuration / 60);\n\t\t\t\t\t\t\tconst newSeconds = newDuration % 60;\n\t\t\t\t\t\t\tdocument.getElementById('audio-duration').textContent = `${newMinutes}:${newSeconds.toString().padStart(2, '0')}`;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tlet quality = 'Good';\n\t\t\t\t\t\t\tif (newDuration < 5) quality = 'Too short';\n\t\t\t\t\t\t\telse if (newDuration < 10) quality = 'Fair';\n\t\t\t\t\t\t\telse if (newDuration > 60) quality = 'Very long';\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tdocument.getElementById('audio-quality').textContent = quality;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Final fallback\n\t\t\t\t\t\t\tdocument.getElementById('audio-duration').textContent = 'Unknown';\n\t\t\t\t\t\t\tdocument.getElementById('audio-quality').textContent = 'Ready';\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 500);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tpreview.classList.remove('hidden');\n\t\t\tshowIdleState();\n\t\t}\n\n\t\tfunction playRecording(event) {\n\t\t\tif (event) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\tevent.stopPropagation();\n\t\t\t}\n\t\t\t\n\t\t\tconst audio = document.getElementById('recorded-audio');\n\t\t\tif (audio.paused) {\n\t\t\t\taudio.play();\n\t\t\t} else {\n\t\t\t\taudio.pause();\n\t\t\t}\n\t\t}\n\n\t\tfunction retryRecording(event) {\n\t\t\tif (event) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\tevent.stopPropagation();\n\t\t\t}\n\t\t\t\n\t\t\t// Clean up previous recording\n\t\t\tconst audio = document.getElementById('recorded-audio');\n\t\t\tif (audio.src) {\n\t\t\t\tURL.revokeObjectURL(audio.src);\n\t\t\t\taudio.src = '';\n\t\t\t}\n\t\t\t\n\t\t\trecordedBlob = null;\n\t\t\trecordedChunks = [];\n\t\t\t\n\t\t\t// Hide preview and show idle state\n\t\t\tdocument.getElementById('recorded-preview').classList.add('hidden');\n\t\t\tshowIdleState();\n\t\t\tnotifyValidationSystem();\n\t\t}\n\n\t\tfunction showError(message) {\n\t\t\tconst errorDiv = document.getElementById('microphone-error');\n\t\t\tconst errorMessage = document.getElementById('mic-error-message');\n\t\t\terrorMessage.textContent = message;\n\t\t\terrorDiv.classList.remove('hidden');\n\t\t\tshowIdleState();\n\t\t}\n\n\t\tfunction hideError() {\n\t\t\tdocument.getElementById('microphone-error').classList.add('hidden');\n\t\t}\n\n\t\t// Expose recorded blob for form submission\n\t\twindow.getRecordedAudio = function() {\n\t\t\treturn recordedBlob;\n\t\t};\n\n\t\t// Notify validation system when recording state changes\n\t\tfunction notifyValidationSystem() {\n\t\t\t// Check if we have a valid recording\n\t\t\tconst isValid = recordedBlob !== null && recordedBlob.size > 0;\n\t\t\t\n\t\t\t// Update Alpine.js store validation state\n\t\t\tif (typeof Alpine !== 'undefined' && Alpine.store('voiceClone')) {\n\t\t\t\tAlpine.store('voiceClone').validateAudioInput(isValid);\n\t\t\t}\n\t\t}\n\n\t\t// Check microphone permission status on load\n\t\tdocument.addEventListener('DOMContentLoaded', async function() {\n\t\t\ttry {\n\t\t\t\tconst permissionStatus = await navigator.permissions.query({ name: 'microphone' });\n\t\t\t\tif (permissionStatus.state === 'denied') {\n\t\t\t\t\tshowError('Microphone access denied. Please enable microphone access in your browser settings.');\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\t// Permissions API not supported, ignore\n\t\t\t}\n\t\t});\n\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
