package components

templ LoadingAnimation() {
	<div id="voice-generation-loading" class="hidden">
		<div class="fixed inset-0 bg-black bg-opacity-60 z-50 flex items-center justify-center backdrop-blur-sm">
			<div class="bg-white rounded-2xl p-8 max-w-sm mx-4 shadow-2xl transform transition-all duration-300 scale-95 opacity-0" id="loading-modal">
				<div class="text-center">
					<!-- Voice Wave Animation -->
					<div class="mb-6">
						<div class="flex justify-center items-end space-x-1 h-16">
							<div class="w-2 bg-gradient-to-t from-indigo-600 to-purple-600 rounded-full animate-wave-1" style="height: 12px;"></div>
							<div class="w-2 bg-gradient-to-t from-indigo-600 to-purple-600 rounded-full animate-wave-2" style="height: 24px;"></div>
							<div class="w-2 bg-gradient-to-t from-indigo-600 to-purple-600 rounded-full animate-wave-3" style="height: 36px;"></div>
							<div class="w-2 bg-gradient-to-t from-indigo-600 to-purple-600 rounded-full animate-wave-4" style="height: 18px;"></div>
							<div class="w-2 bg-gradient-to-t from-indigo-600 to-purple-600 rounded-full animate-wave-5" style="height: 48px;"></div>
							<div class="w-2 bg-gradient-to-t from-indigo-600 to-purple-600 rounded-full animate-wave-6" style="height: 30px;"></div>
							<div class="w-2 bg-gradient-to-t from-indigo-600 to-purple-600 rounded-full animate-wave-7" style="height: 24px;"></div>
							<div class="w-2 bg-gradient-to-t from-indigo-600 to-purple-600 rounded-full animate-wave-8" style="height: 12px;"></div>
						</div>
					</div>

					<!-- Loading Text -->
					<h3 class="text-xl font-bold text-gray-900 mb-2">Cloning Your Voice</h3>
					<p class="text-gray-600 mb-4">AI is analyzing and generating speech...</p>

					<!-- Progress Steps -->
					<div class="space-y-2 text-left mb-6">
						<div class="flex items-center space-x-3" id="step-1">
							<div class="w-4 h-4 rounded-full bg-green-500 flex-shrink-0 flex items-center justify-center">
								<svg class="w-2.5 h-2.5 text-white" fill="currentColor" viewBox="0 0 20 20">
									<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
								</svg>
							</div>
							<span class="text-sm text-gray-700">Processing audio input</span>
						</div>
						<div class="flex items-center space-x-3" id="step-2">
							<div class="w-4 h-4 rounded-full border-2 border-indigo-600 flex-shrink-0 animate-pulse">
								<div class="w-full h-full rounded-full bg-indigo-600 animate-ping"></div>
							</div>
							<span class="text-sm text-gray-700">Analyzing voice patterns</span>
						</div>
						<div class="flex items-center space-x-3" id="step-3">
							<div class="w-4 h-4 rounded-full border-2 border-gray-300 flex-shrink-0"></div>
							<span class="text-sm text-gray-400">Generating speech</span>
						</div>
					</div>

					<!-- Progress Bar -->
					<div class="w-full bg-gray-200 rounded-full h-2">
						<div class="bg-gradient-to-r from-indigo-600 to-purple-600 h-2 rounded-full transition-all duration-1000" id="progress-bar" style="width: 33%"></div>
					</div>
					<p class="text-xs text-gray-500 mt-2">This may take 20-30 seconds</p>
				</div>
			</div>
		</div>
	</div>

	<style>
		@keyframes wave-1 { 
			0%, 100% { height: 12px; } 
			50% { height: 32px; } 
		}
		@keyframes wave-2 { 
			0%, 100% { height: 24px; } 
			50% { height: 48px; } 
		}
		@keyframes wave-3 { 
			0%, 100% { height: 36px; } 
			50% { height: 60px; } 
		}
		@keyframes wave-4 { 
			0%, 100% { height: 18px; } 
			50% { height: 42px; } 
		}
		@keyframes wave-5 { 
			0%, 100% { height: 48px; } 
			50% { height: 64px; } 
		}
		@keyframes wave-6 { 
			0%, 100% { height: 30px; } 
			50% { height: 54px; } 
		}
		@keyframes wave-7 { 
			0%, 100% { height: 24px; } 
			50% { height: 48px; } 
		}
		@keyframes wave-8 { 
			0%, 100% { height: 12px; } 
			50% { height: 32px; } 
		}

		.animate-wave-1 { animation: wave-1 1.2s ease-in-out infinite; }
		.animate-wave-2 { animation: wave-2 1.2s ease-in-out infinite 0.1s; }
		.animate-wave-3 { animation: wave-3 1.2s ease-in-out infinite 0.2s; }
		.animate-wave-4 { animation: wave-4 1.2s ease-in-out infinite 0.3s; }
		.animate-wave-5 { animation: wave-5 1.2s ease-in-out infinite 0.4s; }
		.animate-wave-6 { animation: wave-6 1.2s ease-in-out infinite 0.5s; }
		.animate-wave-7 { animation: wave-7 1.2s ease-in-out infinite 0.6s; }
		.animate-wave-8 { animation: wave-8 1.2s ease-in-out infinite 0.7s; }
	</style>

	<script>
		let progressInterval;
		let currentStep = 1;

		window.showVoiceGenerationLoading = function() {
			const loading = document.getElementById('voice-generation-loading');
			const modal = document.getElementById('loading-modal');
			
			loading.classList.remove('hidden');
			
			// Reset progress
			currentStep = 1;
			updateProgress();
			
			// Animate in
			setTimeout(() => {
				modal.classList.remove('scale-95', 'opacity-0');
				modal.classList.add('scale-100', 'opacity-100');
			}, 50);
			
			// Start progress simulation
			progressInterval = setInterval(() => {
				if (currentStep < 3) {
					currentStep++;
					updateProgress();
				}
			}, 8000); // Progress every 8 seconds
		};

		window.hideVoiceGenerationLoading = function() {
			const loading = document.getElementById('voice-generation-loading');
			const modal = document.getElementById('loading-modal');
			
			// Animate out
			modal.classList.remove('scale-100', 'opacity-100');
			modal.classList.add('scale-95', 'opacity-0');
			
			// Hide after animation
			setTimeout(() => {
				loading.classList.add('hidden');
			}, 300);
			
			if (progressInterval) {
				clearInterval(progressInterval);
			}
		};

		function updateProgress() {
			// Update step indicators
			for (let i = 1; i <= 3; i++) {
				const step = document.getElementById(`step-${i}`);
				const circle = step.querySelector('.w-4.h-4');
				const text = step.querySelector('span');
				
				if (i <= currentStep) {
					// Completed or current step
					if (i < currentStep) {
						// Completed
						circle.className = 'w-4 h-4 rounded-full bg-green-500 flex-shrink-0 flex items-center justify-center';
						circle.innerHTML = '<svg class="w-2.5 h-2.5 text-white" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/></svg>';
						text.className = 'text-sm text-gray-700';
					} else {
						// Current step
						circle.className = 'w-4 h-4 rounded-full border-2 border-indigo-600 flex-shrink-0 animate-pulse';
						circle.innerHTML = '<div class="w-full h-full rounded-full bg-indigo-600 animate-ping"></div>';
						text.className = 'text-sm text-gray-700';
					}
				} else {
					// Future step
					circle.className = 'w-4 h-4 rounded-full border-2 border-gray-300 flex-shrink-0';
					circle.innerHTML = '';
					text.className = 'text-sm text-gray-400';
				}
			}
			
			// Update progress bar
			const progressBar = document.getElementById('progress-bar');
			const progress = (currentStep / 3) * 100;
			progressBar.style.width = `${progress}%`;
		}
	</script>
}