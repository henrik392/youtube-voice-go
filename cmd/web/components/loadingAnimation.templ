package components

templ LoadingAnimation() {
	<div id="voice-generation-loading" class="voice-loading-indicator" x-data="loadingProgress()" x-init="init()">
		<div class="flex fixed inset-0 z-50 justify-center items-center bg-black bg-opacity-60 backdrop-blur-sm">
			<div class="p-8 mx-4 max-w-sm bg-white rounded-2xl shadow-2xl" id="loading-modal">
				<div class="text-center">
					<!-- Voice Wave Animation -->
					<div class="mb-6">
						<div class="flex justify-center items-end space-x-1 h-16">
							<div class="w-2 bg-gradient-to-t from-indigo-600 to-purple-600 rounded-full animate-wave-1" style="height: 12px;"></div>
							<div class="w-2 bg-gradient-to-t from-indigo-600 to-purple-600 rounded-full animate-wave-2" style="height: 24px;"></div>
							<div class="w-2 bg-gradient-to-t from-indigo-600 to-purple-600 rounded-full animate-wave-3" style="height: 36px;"></div>
							<div class="w-2 bg-gradient-to-t from-indigo-600 to-purple-600 rounded-full animate-wave-4" style="height: 18px;"></div>
							<div class="w-2 bg-gradient-to-t from-indigo-600 to-purple-600 rounded-full animate-wave-5" style="height: 48px;"></div>
							<div class="w-2 bg-gradient-to-t from-indigo-600 to-purple-600 rounded-full animate-wave-6" style="height: 30px;"></div>
							<div class="w-2 bg-gradient-to-t from-indigo-600 to-purple-600 rounded-full animate-wave-7" style="height: 24px;"></div>
							<div class="w-2 bg-gradient-to-t from-indigo-600 to-purple-600 rounded-full animate-wave-8" style="height: 12px;"></div>
						</div>
					</div>

					<!-- Loading Text -->
					<h3 class="mb-2 text-xl font-bold text-gray-900">Cloning Your Voice</h3>
					<p class="mb-4 text-gray-600">AI is analyzing and generating speech...</p>

					<!-- Progress Steps -->
					<div class="mb-6 space-y-3 text-left">
						<div class="flex items-center space-x-3">
							<div class="flex flex-shrink-0 justify-center items-center w-5 h-5 rounded-full transition-all duration-500"
								 :class="{
									'bg-green-500 shadow-green-500/30 shadow-md': currentStep > 1,
									'bg-indigo-500 shadow-indigo-500/40 shadow-lg animate-pulse': currentStep === 1,
									'border-2 border-gray-300': currentStep < 1
								 }">
								<svg x-show="currentStep > 1" class="w-3 h-3 text-white" fill="currentColor" viewBox="0 0 20 20" x-transition:enter="transition ease-out duration-200" x-transition:enter-start="opacity-0 scale-75" x-transition:enter-end="opacity-100 scale-100">
									<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
								</svg>
								<div x-show="currentStep === 1" class="w-2 h-2 bg-white rounded-full animate-ping"></div>
							</div>
							<span class="text-sm font-medium transition-all duration-300" :class="{
								'text-green-700': currentStep > 1,
								'text-indigo-700': currentStep === 1,
								'text-gray-400': currentStep < 1
							}">
								Processing audio input
							</span>
						</div>
						<div class="flex items-center space-x-3">
							<div class="flex flex-shrink-0 justify-center items-center w-5 h-5 rounded-full transition-all duration-500"
								 :class="{
									'bg-green-500 shadow-green-500/30 shadow-md': currentStep > 2,
									'bg-indigo-500 shadow-indigo-500/40 shadow-lg animate-pulse': currentStep === 2,
									'border-2 border-gray-300': currentStep < 2
								 }">
								<svg x-show="currentStep > 2" class="w-3 h-3 text-white" fill="currentColor" viewBox="0 0 20 20" x-transition:enter="transition ease-out duration-200" x-transition:enter-start="opacity-0 scale-75" x-transition:enter-end="opacity-100 scale-100">
									<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
								</svg>
								<div x-show="currentStep === 2" class="w-2 h-2 bg-white rounded-full animate-ping"></div>
							</div>
							<span class="text-sm font-medium transition-all duration-300" :class="{
								'text-green-700': currentStep > 2,
								'text-indigo-700': currentStep === 2,
								'text-gray-400': currentStep < 2
							}">
								Analyzing voice patterns
							</span>
						</div>
						<div class="flex items-center space-x-3">
							<div class="flex flex-shrink-0 justify-center items-center w-5 h-5 rounded-full transition-all duration-500"
								 :class="{
									'bg-green-500 shadow-green-500/30 shadow-md': currentStep > 3,
									'bg-indigo-500 shadow-indigo-500/40 shadow-lg animate-pulse': currentStep === 3,
									'border-2 border-gray-300': currentStep < 3
								 }">
								<svg x-show="currentStep > 3" class="w-3 h-3 text-white" fill="currentColor" viewBox="0 0 20 20" x-transition:enter="transition ease-out duration-200" x-transition:enter-start="opacity-0 scale-75" x-transition:enter-end="opacity-100 scale-100">
									<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
								</svg>
								<div x-show="currentStep === 3" class="w-2 h-2 bg-white rounded-full animate-ping"></div>
							</div>
							<span class="text-sm font-medium transition-all duration-300" :class="{
								'text-green-700': currentStep > 3,
								'text-indigo-700': currentStep === 3,
								'text-gray-400': currentStep < 3
							}">
								Generating speech
							</span>
						</div>
					</div>

					<!-- Progress Bar -->
					<div class="w-full h-2 bg-gray-200 rounded-full">
						<div class="h-2 bg-gradient-to-r from-indigo-600 to-purple-600 rounded-full transition-all duration-500" 
							 :style="`width: ${progress}%`"></div>
					</div>
					<div class="flex justify-between items-center mt-2">
						<p class="text-xs text-gray-500">
							Estimated time: <span x-text="timeRemaining"></span>
						</p>
						<p class="text-xs text-gray-600" x-text="`${Math.round(progress)}%`"></p>
					</div>
				</div>
			</div>
		</div>
	</div>

	<style>
		/* Voice loading indicator styles */
		#voice-generation-loading {
			opacity: 0;
			pointer-events: none;
			transition: opacity 500ms ease-in;
		}
		#voice-generation-loading.htmx-request {
			opacity: 1;
			pointer-events: auto;
		}

		@keyframes wave-1 {
			0%, 100% { height: 12px; }
			50% { height: 32px; }
		}
		@keyframes wave-2 {
			0%, 100% { height: 24px; }
			50% { height: 48px; }
		}
		@keyframes wave-3 {
			0%, 100% { height: 36px; }
			50% { height: 60px; }
		}
		@keyframes wave-4 {
			0%, 100% { height: 18px; }
			50% { height: 42px; }
		}
		@keyframes wave-5 {
			0%, 100% { height: 48px; }
			50% { height: 64px; }
		}
		@keyframes wave-6 {
			0%, 100% { height: 30px; }
			50% { height: 54px; }
		}
		@keyframes wave-7 {
			0%, 100% { height: 24px; }
			50% { height: 48px; }
		}
		@keyframes wave-8 {
			0%, 100% { height: 12px; }
			50% { height: 32px; }
		}

		.animate-wave-1 { animation: wave-1 1.2s ease-in-out infinite; }
		.animate-wave-2 { animation: wave-2 1.2s ease-in-out infinite 0.1s; }
		.animate-wave-3 { animation: wave-3 1.2s ease-in-out infinite 0.2s; }
		.animate-wave-4 { animation: wave-4 1.2s ease-in-out infinite 0.3s; }
		.animate-wave-5 { animation: wave-5 1.2s ease-in-out infinite 0.4s; }
		.animate-wave-6 { animation: wave-6 1.2s ease-in-out infinite 0.5s; }
		.animate-wave-7 { animation: wave-7 1.2s ease-in-out infinite 0.6s; }
		.animate-wave-8 { animation: wave-8 1.2s ease-in-out infinite 0.7s; }
	</style>

	<script>
		function loadingProgress() {
			return {
				progress: 0,
				currentStep: 0,
				timeRemaining: '20-30 seconds',
				estimatedDuration: 25000, // 25 seconds baseline
				startTime: null,
				progressInterval: null,

				init() {
					// Listen for when this element gets the htmx-request class
					const observer = new MutationObserver((mutations) => {
						mutations.forEach((mutation) => {
							if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
								const target = mutation.target;
								if (target.classList.contains('htmx-request')) {
									this.reset();
									this.startProgress();
								} else {
									this.stopProgress();
								}
							}
						});
					});
					
					observer.observe(this.$el, { attributes: true });
				},

				reset() {
					// Clear any existing interval
					if (this.progressInterval) {
						clearInterval(this.progressInterval);
						this.progressInterval = null;
					}
					
					// Reset all progress variables
					this.progress = 0;
					this.currentStep = 0;
					this.timeRemaining = '20-30 seconds';
					this.startTime = null;
				},

				startProgress() {
					this.startTime = Date.now();
					this.progress = 5;
					this.currentStep = 1;
					this.timeRemaining = '20-30 seconds';
					
					// Start the progress animation
					this.progressInterval = setInterval(() => {
						this.updateProgress();
					}, 200);
				},

				stopProgress() {
					if (this.progressInterval) {
						clearInterval(this.progressInterval);
						this.progressInterval = null;
					}
				},

				updateProgress() {
					const elapsed = Date.now() - this.startTime;
					const progressRatio = elapsed / this.estimatedDuration;
					
					// Ease-out curve for more realistic progress
					this.progress = Math.min(95, 5 + (90 * this.easeOut(progressRatio)));
					
					// Update steps based on progress
					if (this.progress >= 25 && this.currentStep < 2) {
						this.currentStep = 2;
					} else if (this.progress >= 65 && this.currentStep < 3) {
						this.currentStep = 3;
					}
					
					// Update time remaining
					this.updateTimeRemaining(elapsed);
					
					// Stop at 95% to wait for actual completion
					if (this.progress >= 95) {
						clearInterval(this.progressInterval);
						this.timeRemaining = 'Almost done...';
					}
				},

				updateTimeRemaining(elapsed) {
					const remainingMs = Math.max(0, this.estimatedDuration - elapsed);
					const remainingSeconds = Math.ceil(remainingMs / 1000);
					
					if (remainingSeconds > 15) {
						this.timeRemaining = '15-30 seconds';
					} else if (remainingSeconds > 10) {
						this.timeRemaining = '10-15 seconds';
					} else if (remainingSeconds > 5) {
						this.timeRemaining = '5-10 seconds';
					} else if (remainingSeconds > 0) {
						this.timeRemaining = 'A few seconds...';
					} else {
						this.timeRemaining = 'Almost done...';
					}
				},

				easeOut(t) {
					// Cubic ease-out for natural progress feel
					return 1 - Math.pow(1 - t, 3);
				},

				// Clean up interval when component is destroyed
				destroy() {
					if (this.progressInterval) {
						clearInterval(this.progressInterval);
					}
				}
			}
		}
	</script>

}