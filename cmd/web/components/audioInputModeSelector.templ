package components

templ AudioInputModeSelector() {
	<div id="audio-input-mode-selector" class="mb-8">
		<div class="text-center mb-6">
			<h2 class="text-xl font-semibold text-gray-900 mb-2">Choose Audio Source</h2>
			<p class="text-gray-600 text-sm">Select how you want to provide the voice to clone</p>
		</div>
		
		<div class="grid grid-cols-1 gap-4 sm:grid-cols-3">
			<!-- URL Mode -->
			<div class="audio-mode-card" data-mode="url">
				<div class="relative cursor-pointer rounded-xl border border-gray-200 bg-white p-6 shadow-sm hover:shadow-md hover:bg-gray-50 transition-all duration-200 hover:border-indigo-300 h-full">
					<div class="flex flex-col items-center text-center h-full">
						<div class="flex-1 flex flex-col items-center justify-center">
							<div class="mb-4 flex h-12 w-12 items-center justify-center rounded-lg bg-gradient-to-br from-red-500 to-pink-500 text-white shadow-sm">
								<svg class="h-6 w-6" fill="currentColor" viewBox="0 0 24 24">
									<path d="M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z"/>
								</svg>
							</div>
							<h3 class="text-lg font-semibold text-gray-900 mb-2">Video URL</h3>
							<p class="text-sm text-gray-500 mb-4">YouTube, TikTok, Instagram</p>
						</div>
						<div class="flex items-center space-x-2 text-xs text-gray-400">
							<svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
							</svg>
							<span>Best quality</span>
						</div>
					</div>
					<input type="radio" name="audio-mode" value="url" class="sr-only" checked/>
				</div>
			</div>

			<!-- File Upload Mode -->
			<div class="audio-mode-card" data-mode="file">
				<div class="relative cursor-pointer rounded-xl border border-gray-200 bg-white p-6 shadow-sm hover:shadow-md hover:bg-gray-50 transition-all duration-200 hover:border-indigo-300 h-full">
					<div class="flex flex-col items-center text-center h-full">
						<div class="flex-1 flex flex-col items-center justify-center">
							<div class="mb-4 flex h-12 w-12 items-center justify-center rounded-lg bg-gradient-to-br from-blue-500 to-cyan-500 text-white shadow-sm">
								<svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"/>
								</svg>
							</div>
							<h3 class="text-lg font-semibold text-gray-900 mb-2">Upload File</h3>
							<p class="text-sm text-gray-500 mb-4">MP3, WAV, M4A files</p>
						</div>
						<div class="flex items-center space-x-2 text-xs text-gray-400">
							<svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"/>
							</svg>
							<span>Private & secure</span>
						</div>
					</div>
					<input type="radio" name="audio-mode" value="file" class="sr-only"/>
				</div>
			</div>

			<!-- Microphone Mode -->
			<div class="audio-mode-card" data-mode="microphone">
				<div class="relative cursor-pointer rounded-xl border border-gray-200 bg-white p-6 shadow-sm hover:shadow-md hover:bg-gray-50 transition-all duration-200 hover:border-indigo-300 h-full">
					<div class="flex flex-col items-center text-center h-full">
						<div class="flex-1 flex flex-col items-center justify-center">
							<div class="mb-4 flex h-12 w-12 items-center justify-center rounded-lg bg-gradient-to-br from-green-500 to-emerald-500 text-white shadow-sm">
								<svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z"/>
								</svg>
							</div>
							<h3 class="text-lg font-semibold text-gray-900 mb-2">Record Audio</h3>
							<p class="text-sm text-gray-500 mb-4">Use your microphone</p>
						</div>
						<div class="flex items-center space-x-2 text-xs text-gray-400">
							<svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"/>
							</svg>
							<span>Real-time</span>
						</div>
					</div>
					<input type="radio" name="audio-mode" value="microphone" class="sr-only"/>
				</div>
			</div>
		</div>
	</div>

	<script>
		document.addEventListener('DOMContentLoaded', function() {
			const cards = document.querySelectorAll('.audio-mode-card');
			const audioInputContainer = document.getElementById('audio-input-container');

			// Set initial state
			updateAudioInputMode('url');
			// Set initial visual state for the first card (URL mode)
			const firstCard = document.querySelector('.audio-mode-card[data-mode="url"] .relative');
			if (firstCard) {
				firstCard.classList.remove('border-gray-200', 'bg-white');
				firstCard.classList.add('border-indigo-500', 'bg-indigo-50', 'ring-2', 'ring-indigo-500');
			}

			cards.forEach(card => {
				card.addEventListener('click', function() {
					const mode = this.dataset.mode;
					const radio = this.querySelector('input[type="radio"]');
					
					// Update radio selection
					document.querySelectorAll('input[name="audio-mode"]').forEach(r => r.checked = false);
					radio.checked = true;

					// Update visual state
					cards.forEach(c => {
						const cardElement = c.querySelector('.relative');
						cardElement.classList.remove('border-indigo-500', 'bg-indigo-50', 'ring-2', 'ring-indigo-500');
						cardElement.classList.add('border-gray-200', 'bg-white');
					});

					const selectedCard = this.querySelector('.relative');
					selectedCard.classList.remove('border-gray-200', 'bg-white');
					selectedCard.classList.add('border-indigo-500', 'bg-indigo-50', 'ring-2', 'ring-indigo-500');

					// Update the input area
					updateAudioInputMode(mode);
				});
			});

			function updateAudioInputMode(mode) {
				const container = document.getElementById('audio-input-container');
				if (!container) return;

				let content = '';
				switch(mode) {
					case 'url':
						container.innerHTML = `
							<div id="url-input">
								<label for="url" class="block pl-4 text-sm font-bold leading-6 text-gray-900">Video URL</label>
								<div class="relative mt-2 rounded-md shadow-sm">
									<div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
										<img class="w-auto h-4 opacity-70" src="https://cdn-icons-png.freepik.com/256/455/455691.png?semt=ais_hybrid" alt=""/>
									</div>
									<input
										type="text"
										name="url"
										id="url"
								class="block w-full rounded-md py-1.5 pl-9 pr-4 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
								data-valid="false"
								aria-invalid="true"
										placeholder="https://www.youtube.com/watch?v=..."
										hx-trigger="keyup changed delay:100ms"
										hx-post="/validate-url"
										hx-target="#url-input"
										hx-swap="outerHTML"
										hx-indicator=""
									/>
								</div>
							</div>
						`;
						break;
					case 'file':
						container.innerHTML = `<div id="file-upload-component"></div>`;
						htmx.ajax('GET', '/components/file-upload', {target: '#file-upload-component'});
						break;
					case 'microphone':
						container.innerHTML = `<div id="microphone-component"></div>`;
						htmx.ajax('GET', '/components/microphone', {target: '#microphone-component'});
						break;
				}
			}
		});
	</script>
}