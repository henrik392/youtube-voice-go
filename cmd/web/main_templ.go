// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.924
package web

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "github.com/henrik392/youtube-voice-go/cmd/web/components"

func MainPage() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"max-w-4xl mx-auto px-4 py-8\"><div class=\"text-center mb-12\"><h1 class=\"text-4xl font-bold tracking-tight text-gray-900 sm:text-6xl mb-4\">Clone Any Voice with AI</h1><p class=\"text-xl text-gray-600 max-w-2xl mx-auto\">Transform any audio into custom AI-generated speech. Choose your audio source and let our AI clone the voice.</p></div><div class=\"max-w-3xl mx-auto\"><form id=\"voice-form\" hx-post=\"/generate-voice-enhanced\" hx-target=\"#audio-player\" hx-swap=\"outerHTML\" hx-indicator=\"#voice-generation-loading\"><!-- Audio Input Mode Selector -->")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = components.AudioInputModeSelector().Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<!-- Dynamic Audio Input Container --><div id=\"audio-input-container\" class=\"mb-8\"><!-- This will be populated by JavaScript based on selected mode --></div><!-- Text to Speech Section --><div class=\"text-start\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = components.TextAreaToSpeech().Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<!-- Tips Section --><div class=\"mt-6 p-4 bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg\"><div class=\"flex items-start space-x-3\"><svg class=\"w-5 h-5 text-blue-500 mt-0.5 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clip-rule=\"evenodd\"></path></svg><div class=\"text-sm text-blue-800\"><p class=\"font-semibold mb-2\">Tips for best results:</p><ul class=\"space-y-1 text-blue-700\"><li>• Use at least 10 seconds of clean, clear audio</li><li>• Avoid background noise and music</li><li>• Single speaker works better than multiple voices</li><li>• Generation may take 20-30 seconds</li></ul></div></div></div></div><div class=\"flex flex-col items-center justify-center space-y-4 mt-8 w-full\"><button type=\"submit\" class=\"relative flex items-center justify-center w-full px-8 py-3 text-base font-semibold text-white bg-gradient-to-r from-indigo-600 to-purple-600 rounded-xl shadow-lg hover:from-indigo-500 hover:to-purple-500 transform hover:scale-105 transition-all duration-200 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 disabled:opacity-60 disabled:cursor-not-allowed disabled:transform-none disabled:hover:from-indigo-600 disabled:hover:to-purple-600 disabled:shadow-none\" id=\"generate-button\" disabled><!-- Default Icon --><svg class=\"w-5 h-5 mr-2 transition-opacity duration-200\" id=\"voice-icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 14.142M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z\"></path></svg><!-- Loading Icon --><svg class=\"w-5 h-5 mr-2 hidden animate-spin transition-opacity duration-200\" id=\"loading-icon\" fill=\"none\" viewBox=\"0 0 24 24\"><circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle> <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path></svg> <span class=\"generate-text transition-opacity duration-200\">Generate Voice Clone</span><!-- Subtle Pulse Effect when Loading --><div class=\"absolute inset-0 bg-gradient-to-r from-indigo-500 to-purple-500 rounded-xl opacity-0\" id=\"button-pulse\"></div></button>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = components.AudioPlayer("", "").Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "</div></form></div><!-- Loading Animation -->")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = components.LoadingAnimation().Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "</div><script>\n\t\t\t// Form validation state\n\t\t\tlet validationState = {\n\t\t\t\ttext: false,\n\t\t\t\taudioInput: false,\n\t\t\t\taudioMode: 'url' // default mode\n\t\t\t};\n\n\t\t\t// Update button state based on validation\n\t\t\tfunction updateButtonState() {\n\t\t\t\tconst button = document.getElementById('generate-button');\n\t\t\t\tconst isValid = validationState.text && validationState.audioInput;\n\n\t\t\t\tbutton.disabled = !isValid;\n\n\t\t\t\tif (isValid) {\n\t\t\t\t\tbutton.classList.remove('opacity-60');\n\t\t\t\t\tbutton.classList.add('hover:scale-105');\n\t\t\t\t\t// Ensure text stays white when active\n\t\t\t\t\tbutton.classList.add('text-white');\n\t\t\t\t} else {\n\t\t\t\t\tbutton.classList.add('opacity-60');\n\t\t\t\t\tbutton.classList.remove('hover:scale-105');\n\t\t\t\t\t// Keep text white even when disabled\n\t\t\t\t\tbutton.classList.add('text-white');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Text validation\n\t\t\tfunction validateText() {\n\t\t\t\tconst textElement = document.getElementById('text');\n\t\t\t\tif (!textElement) return false;\n\n\t\t\t\tconst text = textElement.value.trim();\n\t\t\t\tvalidationState.text = text.length > 0 && text.length <= 500;\n\t\t\t\tupdateButtonState();\n\t\t\t\treturn validationState.text;\n\t\t\t}\n\n\t\t\t// Audio input validation\n\t\t\tfunction validateAudioInput() {\n\t\t\t\tconst mode = validationState.audioMode;\n\t\t\t\tlet isValid = false;\n\n\t\t\t\tswitch(mode) {\n\t\t\t\t\tcase 'url':\n\t\t\t\t\t\tconst urlElement = document.getElementById('url');\n\t\t\t\t\t\tif (urlElement) {\n\t\t\t\t\t\t\tconst url = urlElement.value.trim();\n\t\t\t\t\t\t\t// Trust server-rendered validity from /validate-url via data-valid\n\t\t\t\t\t\t\tconst serverValidAttr = urlElement.getAttribute('data-valid');\n\t\t\t\t\t\t\tif (serverValidAttr === null) {\n\t\t\t\t\t\t\t\t// Fallback while waiting for server-rendered attribute\n\t\t\t\t\t\t\t\tisValid = url.length > 0 && (url.includes('youtube.com') || url.includes('youtu.be') || url.includes('tiktok.com') || url.includes('instagram.com'));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tisValid = serverValidAttr === 'true';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Update styling immediately for better UX while server response comes back\n\t\t\t\t\t\t\tupdateURLStyling(urlElement, url, isValid);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'file':\n\t\t\t\t\t\t// Check if file is selected\n\t\t\t\t\t\tconst selectedFile = window.getSelectedAudioFile && window.getSelectedAudioFile();\n\t\t\t\t\t\tisValid = !!selectedFile;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'microphone':\n\t\t\t\t\t\t// Check if audio is recorded\n\t\t\t\t\t\tconst recordedAudio = window.getRecordedAudio && window.getRecordedAudio();\n\t\t\t\t\t\tisValid = !!recordedAudio;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tvalidationState.audioInput = isValid;\n\t\t\t\tupdateButtonState();\n\t\t\t\treturn isValid;\n\t\t\t}\n\n\t\t\t// Update URL input styling based on validation\n\t\t\tfunction updateURLStyling(urlElement, url, isValid) {\n\t\t\t\tif (!url || url.length === 0) {\n\t\t\t\t\t// No input - neutral state\n\t\t\t\t\turlElement.className = \"block w-full rounded-md py-1.5 pl-9 pr-4 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\";\n\t\t\t\t} else if (isValid) {\n\t\t\t\t\t// Valid URL - green border\n\t\t\t\t\turlElement.className = \"block w-full rounded-md py-1.5 pl-9 pr-4 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6 border-2 border-green-500\";\n\t\t\t\t} else {\n\t\t\t\t\t// Invalid URL - red border\n\t\t\t\t\turlElement.className = \"block w-full rounded-md py-1.5 pl-9 pr-4 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6 border-2 border-red-500\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set up real-time validation\n\t\t\tfunction setupValidation() {\n\t\t\t\t// Text validation\n\t\t\t\tconst textElement = document.getElementById('text');\n\t\t\t\tif (textElement) {\n\t\t\t\t\ttextElement.addEventListener('input', validateText);\n\t\t\t\t\ttextElement.addEventListener('blur', validateText);\n\t\t\t\t}\n\n\t\t\t\t// URL validation (when in URL mode)\n\t\t\t\tconst urlElement = document.getElementById('url');\n\t\t\t\tif (urlElement && validationState.audioMode === 'url') {\n\t\t\t\t\t// Remove existing listeners to prevent duplicates\n\t\t\t\t\turlElement.removeEventListener('input', validateAudioInput);\n\t\t\t\t\turlElement.removeEventListener('blur', validateAudioInput);\n\t\t\t\t\turlElement.removeEventListener('keyup', validateAudioInput);\n\n\t\t\t\t\t// Add new listeners for immediate feedback\n\t\t\t\t\turlElement.addEventListener('input', validateAudioInput);\n\t\t\t\t\turlElement.addEventListener('blur', validateAudioInput);\n\t\t\t\t\turlElement.addEventListener('keyup', validateAudioInput);\n\t\t\t\t}\n\n\t\t\t\t// Initial validation\n\t\t\t\tvalidateText();\n\t\t\t\tvalidateAudioInput();\n\t\t\t}\n\n\t\t\t// Enhanced form submission handling\n\t\t\tdocument.addEventListener('htmx:configRequest', function(evt) {\n\t\t\t\tconst form = evt.detail.elt;\n\t\t\t\tif (form.id === 'voice-form') {\n\t\t\t\t\tconst audioMode = document.querySelector('input[name=\"audio-mode\"]:checked')?.value;\n\t\t\t\t\tevt.detail.parameters['audio-mode'] = audioMode;\n\n\t\t\t\t\t// Add mode-specific data\n\t\t\t\t\tif (audioMode === 'file') {\n\t\t\t\t\t\tconst selectedFile = window.getSelectedAudioFile && window.getSelectedAudioFile();\n\t\t\t\t\t\tif (selectedFile) {\n\t\t\t\t\t\t\tconst formData = new FormData();\n\t\t\t\t\t\t\tformData.append('audio-file', selectedFile);\n\t\t\t\t\t\t\tformData.append('text', evt.detail.parameters.text);\n\t\t\t\t\t\t\tformData.append('audio-mode', audioMode);\n\n\t\t\t\t\t\t\t// Override the request to send FormData\n\t\t\t\t\t\t\tevt.detail.xhr = new XMLHttpRequest();\n\t\t\t\t\t\t\tevt.detail.xhr.open('POST', evt.detail.path);\n\t\t\t\t\t\t\tevt.detail.xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n\t\t\t\t\t\t\tevt.detail.xhr.send(formData);\n\t\t\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (audioMode === 'microphone') {\n\t\t\t\t\t\tconst recordedAudio = window.getRecordedAudio && window.getRecordedAudio();\n\t\t\t\t\t\tif (recordedAudio) {\n\t\t\t\t\t\t\tconst formData = new FormData();\n\t\t\t\t\t\t\tformData.append('recording', recordedAudio);\n\t\t\t\t\t\t\tformData.append('text', evt.detail.parameters.text);\n\t\t\t\t\t\t\tformData.append('audio-mode', audioMode);\n\n\t\t\t\t\t\t\t// Override the request to send FormData\n\t\t\t\t\t\t\tevt.detail.xhr = new XMLHttpRequest();\n\t\t\t\t\t\t\tevt.detail.xhr.open('POST', evt.detail.path);\n\t\t\t\t\t\t\tevt.detail.xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n\t\t\t\t\t\t\tevt.detail.xhr.send(formData);\n\t\t\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Re-initialize validation after HTMX swaps (e.g., URL input re-render)\n\t\t\tdocument.addEventListener('htmx:afterSwap', function(evt) {\n\t\t\t\t// After swapping URL input, reattach listeners and revalidate\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tsetupValidation();\n\t\t\t\t\tvalidateAudioInput();\n\t\t\t\t}, 0);\n\t\t\t});\n\n\t\t\t// Form validation before submission\n\t\t\tdocument.getElementById('voice-form').addEventListener('htmx:beforeRequest', function(evt) {\n\t\t\t\tconst text = document.getElementById('text').value.trim();\n\t\t\t\tconst audioMode = document.querySelector('input[name=\"audio-mode\"]:checked')?.value;\n\n\t\t\t\tif (!text) {\n\t\t\t\t\talert('Please enter text to convert to speech.');\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!audioMode) {\n\t\t\t\t\talert('Please select an audio input mode.');\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Mode-specific validation\n\t\t\t\tif (audioMode === 'url') {\n\t\t\t\t\tconst urlEl = document.getElementById('url');\n\t\t\t\t\tconst url = urlEl?.value.trim();\n\t\t\t\t\tconst serverValid = urlEl?.getAttribute('data-valid') === 'true';\n\t\t\t\t\tif (!url || !serverValid) {\n\t\t\t\t\t\talert('Please enter a valid video URL.');\n\t\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} else if (audioMode === 'file') {\n\t\t\t\t\tconst selectedFile = window.getSelectedAudioFile && window.getSelectedAudioFile();\n\t\t\t\t\tif (!selectedFile) {\n\t\t\t\t\t\talert('Please select an audio file to upload.');\n\t\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} else if (audioMode === 'microphone') {\n\t\t\t\t\tconst recordedAudio = window.getRecordedAudio && window.getRecordedAudio();\n\t\t\t\t\tif (!recordedAudio) {\n\t\t\t\t\t\talert('Please record audio using your microphone.');\n\t\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Show loading animation and update button state\n\t\t\t\tconst button = document.getElementById('generate-button');\n\t\t\t\tconst voiceIcon = document.getElementById('voice-icon');\n\t\t\t\tconst loadingIcon = document.getElementById('loading-icon');\n\t\t\t\tconst buttonPulse = document.getElementById('button-pulse');\n\t\t\t\tconst generateText = button.querySelector('.generate-text');\n\n\t\t\t\tbutton.disabled = true;\n\t\t\t\tgenerateText.textContent = 'Generating Voice...';\n\n\t\t\t\t// Switch icons\n\t\t\t\tvoiceIcon.classList.add('hidden');\n\t\t\t\tloadingIcon.classList.remove('hidden');\n\t\t\t\tbuttonPulse.classList.remove('opacity-0');\n\t\t\t\tbuttonPulse.classList.add('button-pulse-subtle');\n\n\t\t\t\t// Show the loading animation\n\t\t\t\tif (window.showVoiceGenerationLoading) {\n\t\t\t\t\twindow.showVoiceGenerationLoading();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Reset button state after request\n\t\t\tdocument.getElementById('voice-form').addEventListener('htmx:afterRequest', function(evt) {\n\t\t\t\tresetButtonState();\n\n\t\t\t\t// Hide the loading animation\n\t\t\t\tif (window.hideVoiceGenerationLoading) {\n\t\t\t\t\twindow.hideVoiceGenerationLoading();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Also handle errors by hiding loading\n\t\t\tdocument.getElementById('voice-form').addEventListener('htmx:responseError', function(evt) {\n\t\t\t\tresetButtonState();\n\n\t\t\t\t// Hide the loading animation\n\t\t\t\tif (window.hideVoiceGenerationLoading) {\n\t\t\t\t\twindow.hideVoiceGenerationLoading();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfunction resetButtonState() {\n\t\t\t\tconst voiceIcon = document.getElementById('voice-icon');\n\t\t\t\tconst loadingIcon = document.getElementById('loading-icon');\n\t\t\t\tconst buttonPulse = document.getElementById('button-pulse');\n\t\t\t\tconst button = document.getElementById('generate-button');\n\t\t\t\tconst generateText = button.querySelector('.generate-text');\n\n\t\t\t\tgenerateText.textContent = 'Generate Voice Clone';\n\n\t\t\t\t// Switch icons back\n\t\t\t\tvoiceIcon.classList.remove('hidden');\n\t\t\t\tloadingIcon.classList.add('hidden');\n\t\t\t\tbuttonPulse.classList.add('opacity-0');\n\t\t\t\tbuttonPulse.classList.remove('button-pulse-subtle');\n\n\t\t\t\t// Re-validate to set correct disabled state\n\t\t\t\tupdateButtonState();\n\t\t\t}\n\n\t\t\t// Initialize validation on page load\n\t\t\tdocument.addEventListener('DOMContentLoaded', function() {\n\t\t\t\t// Set initial mode\n\t\t\t\tvalidationState.audioMode = 'url';\n\n\t\t\t\t// Setup validation\n\t\t\t\tsetTimeout(setupValidation, 100); // Small delay to ensure elements are loaded\n\n\t\t\t\t// Listen for mode changes\n\t\t\t\tdocument.addEventListener('click', function(e) {\n\t\t\t\t\tif (e.target.closest('.audio-mode-card')) {\n\t\t\t\t\t\tconst card = e.target.closest('.audio-mode-card');\n\t\t\t\t\t\tconst newMode = card.dataset.mode;\n\t\t\t\t\t\tif (newMode) {\n\t\t\t\t\t\t\tvalidationState.audioMode = newMode;\n\t\t\t\t\t\t\tvalidationState.audioInput = false; // Reset audio input validation\n\t\t\t\t\t\t\t// Re-setup validation for new mode\n\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\tsetupValidation();\n\t\t\t\t\t\t\t\tvalidateAudioInput();\n\t\t\t\t\t\t\t}, 200);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// Expose validation function for external use\n\t\t\twindow.validateForm = function() {\n\t\t\t\tvalidateText();\n\t\t\t\tvalidateAudioInput();\n\t\t\t\treturn validationState.text && validationState.audioInput;\n\t\t\t};\n\t\t</script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = Base().Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
