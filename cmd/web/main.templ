package web

import "github.com/henrik392/youtube-voice-go/cmd/web/components"

templ MainPage() {
	@Base() {
		<div class="max-w-4xl mx-auto px-4 py-8">
			<div class="text-center mb-12">
				<h1 class="text-4xl font-bold tracking-tight text-gray-900 sm:text-6xl mb-4">
					Clone Any Voice with AI
				</h1>
				<p class="text-xl text-gray-600 max-w-2xl mx-auto">
					Transform any audio into custom AI-generated speech. Choose your audio source and let our AI clone the voice.
				</p>
			</div>
			
			<form id="voice-form" hx-post="/generate-voice-enhanced" hx-target="#audio-player" hx-swap="outerHTML" hx-indicator="#voice-generation-loading">
				<!-- Audio Input Mode Selector -->
				@components.AudioInputModeSelector()
				
				<!-- Dynamic Audio Input Container -->
				<div id="audio-input-container" class="mb-8">
					<!-- This will be populated by JavaScript based on selected mode -->
				</div>
				
				<!-- Text to Speech Section -->
				<div class="text-start">
					@components.TextAreaToSpeech()
					<!-- Tips Section -->
					<div class="mt-6 p-4 bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg">
						<div class="flex items-start space-x-3">
							<svg class="w-5 h-5 text-blue-500 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
								<path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"/>
							</svg>
							<div class="text-sm text-blue-800">
								<p class="font-semibold mb-2">Tips for best results:</p>
								<ul class="space-y-1 text-blue-700">
									<li>• Use at least 10 seconds of clean, clear audio</li>
									<li>• Avoid background noise and music</li>
									<li>• Single speaker works better than multiple voices</li>
									<li>• Generation may take 20-30 seconds</li>
								</ul>
							</div>
						</div>
					</div>
				</div>
				<div class="flex flex-col items-center space-y-4 mt-8">
					<button
						type="submit"
						class="relative flex items-center justify-center px-8 py-3 text-base font-semibold text-white bg-gradient-to-r from-indigo-600 to-purple-600 rounded-xl shadow-lg hover:from-indigo-500 hover:to-purple-500 transform hover:scale-105 transition-all duration-200 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 disabled:opacity-75 disabled:cursor-not-allowed disabled:transform-none disabled:hover:from-indigo-600 disabled:hover:to-purple-600"
						id="generate-button"
					>
						<!-- Default Icon -->
						<svg class="w-5 h-5 mr-2 transition-opacity duration-200" id="voice-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 14.142M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z"/>
						</svg>
						
						<!-- Loading Icon -->
						<svg class="w-5 h-5 mr-2 hidden animate-spin transition-opacity duration-200" id="loading-icon" fill="none" viewBox="0 0 24 24">
							<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
							<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
						</svg>
						
						<span class="generate-text transition-opacity duration-200">Generate Voice Clone</span>
						
						<!-- Pulse Effect when Loading -->
						<div class="absolute inset-0 bg-gradient-to-r from-indigo-600 to-purple-600 rounded-xl opacity-0 animate-pulse" id="button-pulse"></div>
					</button>
					
					@components.AudioPlayer("", "")
				</div>
			</form>
			
			<!-- Loading Animation -->
			@components.LoadingAnimation()
		</div>

		<script>
			// Enhanced form submission handling
			document.addEventListener('htmx:configRequest', function(evt) {
				const form = evt.detail.elt;
				if (form.id === 'voice-form') {
					const audioMode = document.querySelector('input[name="audio-mode"]:checked')?.value;
					evt.detail.parameters['audio-mode'] = audioMode;

					// Add mode-specific data
					if (audioMode === 'file') {
						const selectedFile = window.getSelectedAudioFile && window.getSelectedAudioFile();
						if (selectedFile) {
							const formData = new FormData();
							formData.append('audio-file', selectedFile);
							formData.append('text', evt.detail.parameters.text);
							formData.append('audio-mode', audioMode);
							
							// Override the request to send FormData
							evt.detail.xhr = new XMLHttpRequest();
							evt.detail.xhr.open('POST', evt.detail.path);
							evt.detail.xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
							evt.detail.xhr.send(formData);
							evt.preventDefault();
						}
					} else if (audioMode === 'microphone') {
						const recordedAudio = window.getRecordedAudio && window.getRecordedAudio();
						if (recordedAudio) {
							const formData = new FormData();
							formData.append('recording', recordedAudio);
							formData.append('text', evt.detail.parameters.text);
							formData.append('audio-mode', audioMode);
							
							// Override the request to send FormData
							evt.detail.xhr = new XMLHttpRequest();
							evt.detail.xhr.open('POST', evt.detail.path);
							evt.detail.xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
							evt.detail.xhr.send(formData);
							evt.preventDefault();
						}
					}
				}
			});

			// Form validation before submission
			document.getElementById('voice-form').addEventListener('htmx:beforeRequest', function(evt) {
				const text = document.getElementById('text').value.trim();
				const audioMode = document.querySelector('input[name="audio-mode"]:checked')?.value;
				
				if (!text) {
					alert('Please enter text to convert to speech.');
					evt.preventDefault();
					return;
				}

				if (!audioMode) {
					alert('Please select an audio input mode.');
					evt.preventDefault();
					return;
				}

				// Mode-specific validation
				if (audioMode === 'url') {
					const url = document.getElementById('url')?.value.trim();
					if (!url) {
						alert('Please enter a valid video URL.');
						evt.preventDefault();
						return;
					}
				} else if (audioMode === 'file') {
					const selectedFile = window.getSelectedAudioFile && window.getSelectedAudioFile();
					if (!selectedFile) {
						alert('Please select an audio file to upload.');
						evt.preventDefault();
						return;
					}
				} else if (audioMode === 'microphone') {
					const recordedAudio = window.getRecordedAudio && window.getRecordedAudio();
					if (!recordedAudio) {
						alert('Please record audio using your microphone.');
						evt.preventDefault();
						return;
					}
				}

				// Show loading animation and update button state
				const button = document.getElementById('generate-button');
				const voiceIcon = document.getElementById('voice-icon');
				const loadingIcon = document.getElementById('loading-icon');
				const buttonPulse = document.getElementById('button-pulse');
				const generateText = button.querySelector('.generate-text');
				
				button.disabled = true;
				generateText.textContent = 'Generating Voice...';
				
				// Switch icons
				voiceIcon.classList.add('hidden');
				loadingIcon.classList.remove('hidden');
				buttonPulse.classList.remove('opacity-0');
				
				// Show the loading animation
				if (window.showVoiceGenerationLoading) {
					window.showVoiceGenerationLoading();
				}
			});

			// Reset button state after request
			document.getElementById('voice-form').addEventListener('htmx:afterRequest', function(evt) {
				resetButtonState();
				
				// Hide the loading animation
				if (window.hideVoiceGenerationLoading) {
					window.hideVoiceGenerationLoading();
				}
			});
			
			// Also handle errors by hiding loading
			document.getElementById('voice-form').addEventListener('htmx:responseError', function(evt) {
				resetButtonState();
				
				// Hide the loading animation
				if (window.hideVoiceGenerationLoading) {
					window.hideVoiceGenerationLoading();
				}
			});
			
			function resetButtonState() {
				const button = document.getElementById('generate-button');
				const voiceIcon = document.getElementById('voice-icon');
				const loadingIcon = document.getElementById('loading-icon');
				const buttonPulse = document.getElementById('button-pulse');
				const generateText = button.querySelector('.generate-text');
				
				button.disabled = false;
				generateText.textContent = 'Generate Voice Clone';
				
				// Switch icons back
				voiceIcon.classList.remove('hidden');
				loadingIcon.classList.add('hidden');
				buttonPulse.classList.add('opacity-0');
			}
		</script>
	}
}
