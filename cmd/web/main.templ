package web

import "github.com/henrik392/youtube-voice-go/cmd/web/components"

templ MainPage() {
	@Base() {
		<div class="px-4 py-8 mx-auto max-w-4xl">
			<div class="mb-12 text-center">
				<h1 class="mb-4 text-4xl font-bold tracking-tight text-gray-900 sm:text-6xl">
					Clone Any Voice with AI
				</h1>
				<p class="mx-auto max-w-2xl text-xl text-gray-600">
					Transform any audio into custom AI-generated speech. Choose your audio source and let our AI clone the voice.
				</p>
			</div>

			<div class="mx-auto max-w-3xl">
				<form id="voice-form" hx-post="/generate-voice-enhanced" hx-target="#audio-player" hx-swap="outerHTML" hx-indicator="#voice-generation-loading" enctype="multipart/form-data">
					<!-- Audio Input Mode Selector -->
					@components.AudioInputModeSelector()

					<!-- Dynamic Audio Input Container -->
					<div id="audio-input-container" class="mb-8">
						<!-- This will be populated by JavaScript based on selected mode -->
					</div>

					<!-- Text to Speech Section -->
					<div class="text-start">
						@components.TextAreaToSpeech()
						<!-- Tips Section -->
						<div class="p-4 mt-6 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg border border-blue-200">
						<div class="flex items-start space-x-3">
							<svg class="flex-shrink-0 mt-0.5 w-5 h-5 text-blue-500" fill="currentColor" viewBox="0 0 20 20">
								<path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"/>
							</svg>
							<div class="text-sm text-blue-800">
								<p class="mb-2 font-semibold">Tips for best results:</p>
								<ul class="space-y-1 text-blue-700">
									<li>• Use at least 10 seconds of clean, clear audio</li>
									<li>• Avoid background noise and music</li>
									<li>• Single speaker works better than multiple voices</li>
									<li>• Generation may take 20-30 seconds</li>
								</ul>
							</div>
						</div>
					</div>
					</div>
					<div class="flex flex-col justify-center items-center mt-8 space-y-4 w-full">
					@components.SubmitButton()

					@components.AudioPlayer("", "")
					</div>
				</form>
			</div>

			<!-- Loading Animation -->
			@components.LoadingAnimation()
		</div>

		<script>
			// Alpine.js Store Setup
			document.addEventListener('alpine:init', () => {
				Alpine.store('voiceClone', {
					// State
					audioMode: 'url',
					textValid: false,
					audioInputValid: false,
					
					// Computed
					get isFormValid() {
						return this.textValid && this.audioInputValid;
					},
					
					// Actions
					setAudioMode(mode) {
						this.audioMode = mode;
						this.audioInputValid = false; // Reset validation when mode changes
					},
					
					validateText(text) {
						this.textValid = text.length > 0 && text.length <= 500;
					},
					
					validateAudioInput(isValid) {
						this.audioInputValid = isValid;
					}
				});
			});

			// Load default URL input on page load
			document.addEventListener('DOMContentLoaded', function() {
				// Load URL input by default
				htmx.ajax('POST', '/validate-url', {target: '#audio-input-container'});
			});

			// Add audio mode to request parameters and debug
			document.addEventListener('htmx:configRequest', function(evt) {
				const form = evt.detail.elt;
				if (form.id === 'voice-form') {
					console.log('HTMX request starting');
					const audioMode = Alpine.store('voiceClone').audioMode;
					evt.detail.parameters['audio-mode'] = audioMode;
				}
			});

			// Debug HTMX events
			document.addEventListener('htmx:beforeRequest', function(evt) {
				console.log('Before request:', evt.detail);
			});

			document.addEventListener('htmx:afterRequest', function(evt) {
				console.log('After request:', evt.detail);
			});
		</script>
	}
}
